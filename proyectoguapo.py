# -*- coding: utf-8 -*-
"""
Created on Mon Apr 14 12:49:59 2025

@author: rportatil115
"""

# üì¶ Importaci√≥n de librer√≠as necesarias
from selenium import webdriver
from selenium.webdriver.edge.service import Service
from selenium.webdriver.edge.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

# üß† Funci√≥n principal que obtiene rese√±as de un lugar en Google Maps
def obtener_rese√±as():
    # ‚úÖ Se solicita al usuario el nombre de la empresa o lugar
    empresa = input("¬øQu√© empresa o sitio quieres su rese√±a (recuerda poner el lugar)? ")

    # ‚öôÔ∏è Configuraci√≥n del navegador (modo privado, pantalla completa, etc.)
    options = Options()
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--inprivate")
    options.add_argument("start-maximized")

    # üß≠ Ruta del driver de Edge
    service = Service(r"C:\Users\rportatil115\Desktop\PROYECTO IA+PYTHON+POWER BI\msedgedriver.exe")
    driver = webdriver.Edge(service=service, options=options)

    # üåç Abre Google Maps en una vista inicial
    driver.get("https://www.google.es/maps/@39.849787,-4.2468073,939812m/data=!3m1!1e3?hl=es&entry=ttu")

    # üç™ Intenta cerrar el banner de cookies si aparece
    try:
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '[jsname="tWT92d"]'))).click()
    except:
        pass  # Si no aparece, contin√∫a

    # üîç Busca la empresa introducida por el usuario
    cuadro_texto = driver.find_element(By.ID, "searchboxinput")
    cuadro_texto.click()
    time.sleep(1)
    cuadro_texto.send_keys(empresa)
    time.sleep(1)
    cuadro_texto.send_keys(Keys.ENTER)
    time.sleep(3)

    # üß∑ Intenta hacer clic en el bot√≥n de rese√±as
    try:
        rese√±as_btn = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.XPATH, '//button[.//div[contains(text(), "Rese√±as")]]'))
        )
        rese√±as_btn.click()
        time.sleep(2)
    except:
        # üõ† Si no lo encuentra, intenta otra ruta alternativa
        try:
            primer_div = driver.find_element(By.CLASS_NAME, "hfpxzc")
            primer_div.click()
            time.sleep(2)
            rese√±as_btn = driver.find_element(By.XPATH, '//button[.//div[contains(text(), "Rese√±as")]]')
            rese√±as_btn.click()
            time.sleep(3)
        except:
            print("No se pudieron encontrar rese√±as.")
            driver.quit()
            return []

    # ‚è≥ Espera hasta que aparezca el bot√≥n "Ordenar"
    wait = WebDriverWait(driver, 10)
    ordenar_btn = wait.until(EC.element_to_be_clickable(
        (By.XPATH, "//span[contains(text(), 'Ordenar') or contains(text(), 'Sort')]")
    ))
    ordenar_btn.click()
    time.sleep(1.5)

    # üÜï Clic en la opci√≥n "M√°s recientes"
    mas_recientes = wait.until(EC.presence_of_element_located((By.XPATH, "//div[contains(text(), 'M√°s recientes') or contains(text(), 'Newest')]")))
    driver.execute_script("arguments[0].click();", mas_recientes)
    time.sleep(2)

    # ‚¨áÔ∏è Scroll manual dentro del contenedor de rese√±as
    scrollable_div = driver.find_element(By.CSS_SELECTOR, 'div[class="m6QErb DxyBCb kA9KIf dS8AEf XiKgde "]')
    last_height = driver.execute_script('return arguments[0].scrollHeight', scrollable_div)

    while True:
        driver.execute_script('arguments[0].scrollTo(0, arguments[0].scrollHeight);', scrollable_div)
        time.sleep(2)
        new_height = driver.execute_script('return arguments[0].scrollHeight', scrollable_div)
        if new_height == last_height:
            break
        last_height = new_height

    # ‚ûï Expande los comentarios truncados ("Ver m√°s")
    for btn in scrollable_div.find_elements(By.CSS_SELECTOR, 'button[class*="w8nwRe"]'):
        try:
            driver.execute_script("arguments[0].click();", btn)
            time.sleep(0.3)
        except:
            continue

    # üìå Obtiene todas las rese√±as del contenedor (solo rese√±as reales, sin respuestas del due√±o)
    divs_rese√±as = scrollable_div.find_elements(By.CSS_SELECTOR, 'div.jftiEf.fontBodyMedium')

    lista_rese√±as = []
    for rese√±a in divs_rese√±as:
        # ‚ùå Omitir rese√±as del propietario
        try:
            respuesta_due√±o = rese√±a.find_element(By.CSS_SELECTOR, 'div.CDe7pd')
            if respuesta_due√±o:
                continue
        except:
            pass

        # üí¨ Obtener texto de la rese√±a
        try:
            comentario = rese√±a.find_element(By.CLASS_NAME, "wiI7pd").text.strip()
        except:
            comentario = "Sin comentario"

        # ‚≠ê Obtener n√∫mero de estrellas
        try:
            estrellas_elem = rese√±a.find_element(By.CSS_SELECTOR, 'span.kvMYJc')
            estrellas = estrellas_elem.get_attribute("aria-label").strip()
        except:
            estrellas = "Sin estrellas"

        # üìÖ Obtener fecha de la rese√±a
        try:
            fecha_elem = rese√±a.find_element(By.CSS_SELECTOR, 'span.rsqaWe')
            fecha = fecha_elem.text.strip()
        except:
            fecha = "Sin fecha"

        # üì¶ Guardar la rese√±a como diccionario
        lista_rese√±as.append({
            "texto": f"[{estrellas}] ({fecha}) ‚Üí {comentario}",
            "estrellas": estrellas,
            "fecha": fecha,
            "comentario": comentario
        })

    # üîö Cierra el navegador y devuelve las rese√±as recopiladas
    driver.quit()
    return lista_rese√±as

# üîÅ Bloque para probar la funci√≥n si se ejecuta directamente el script
if __name__ == "__main__":
    comentarios = obtener_rese√±as()
    for idx, texto in enumerate(comentarios, 1):
        print(f"{idx}. {texto}")
